<source>
    @type forward
    port 24224
    tag loggf.*
</source>


# ----------- Logging Configuration - Glassfish -----------

# Definition of sources for the payara log files



<filter loggf.**>
	@log_level info
	@type concat
	key log
	stream_identity_key container_id
	multiline_start_regexp /^\{"_Timestamp/
	multiline_end_regexp /\}\}/
	flush_interval 1
	timeout_label "@NORMAL"
</filter>

<match loggf.**>
	@type relabel
	@label @NORMAL
</match>

<label @NORMAL>
<filter loggf.**>
    	type record_transformer
     	enable_ruby true
      	<record>
		logger ${record["log"].gsub(/\r/, '')}
      	</record>
      	remove_keys log,message
</filter>

### We need the json parser to break the log into json elements
<filter loggf.**>
	@type parser
      	format json # apache2, nginx, etc...
      	key_name logger
      	reserve_data true
      	emit_invalid_record_to_error false
    	replace_invalid_sequence true
</filter>

<filter loggf.**>
      type record_transformer
      enable_ruby true
      <record>
         payara.level ${record["_Level"]}
         payara.logger ${record["_LoggerName"]}
         payara.level_value ${record["_LevelValue"]}
         payara.messageid ${record["_MessageID"]}
         payara.thread_id ${record["_ThreadID"]}
         payara.thread_name ${record["_ThreadName"]}
         payara.time_millis ${record["_TimeMillis"]}
         @timestamp ${if record.has_key?('_Timestamp'); record["_Timestamp"]; else time.strftime("%Y-%m-%dT%H:%M:%S.%NZ");end}
         payara.exception ${if record['_LogMessage'].to_s.include?('_StackTrace');record["_LogMessage"]["_Exception"];  else 'null'; end}
         payara.stacktrace ${if record['_LogMessage'].to_s.include?('_Exception');record["_LogMessage"]["_StackTrace"];  else 'null'; end}


    </record>
    <record>
     removeStackTrace ${if record['_LogMessage'].to_s.include?('_StackTrace');record['_LogMessage'].delete('_StackTrace'); end}
     removeException  ${if record['_LogMessage'].to_s.include?('_Exception'); record['_LogMessage'].delete('_Exception'); end}
     payara.message ${if record.has_key?('_Timestamp'); record['_LogMessage'].to_s.gsub(/{}/,'null');  else record["logger"]; end}
    </record>
        remove_keys _Version,_Level,_LoggerName,_LevelValue,_LogMessage,_ThreadID,_ThreadName,_TimeMillis,_MessageID,_Timestamp,log,dummy,removeStackTrace,removeException,logger
    </filter>


<match loggf.**>
  @type stdout
</match>




</label>


